/*******************************************************************************
 * Copyright (c) 2006, 2016, Carnegie Mellon University. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Products derived from the software may not be called "Alice", nor may
 *    "Alice" appear in their name, without prior written permission of
 *    Carnegie Mellon University.
 *
 * 4. All advertising materials mentioning features or use of this software must
 *    display the following acknowledgement: "This product includes software
 *    developed by Carnegie Mellon University"
 *
 * 5. The gallery of art assets and animations provided with this software is
 *    contributed by Electronic Arts Inc. and may be used for personal,
 *    non-commercial, and academic use only. Redistributions of any program
 *    source code that utilizes The Sims 2 Assets must also retain the copyright
 *    notice, list of conditions and the disclaimer contained in
 *    The Alice 3.0 Art Gallery License.
 *
 * DISCLAIMER:
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
 * ANY AND ALL EXPRESS, STATUTORY OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A
 * PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT
 * SHALL THE AUTHORS, COPYRIGHT OWNERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, PUNITIVE OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING FROM OR OTHERWISE RELATING TO
 * THE USE OF OR OTHER DEALINGS WITH THE SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *******************************************************************************/

package org.alice.netbeans.aliceprojectwizard;

import edu.cmu.cs.dennisc.java.io.FileUtilities;

import java.awt.Color;
import java.io.File;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.filesystems.FileUtil;

public class AliceProjectTemplatePanelVisual extends JPanel implements DocumentListener {

	public static final String PROP_PROJECT_NAME = "projectName";
	private AliceProjectTemplateWizardPanel panel;
	private File baseDir = null;
	private java.awt.GridBagConstraints loadPanelConstraints;

	public AliceProjectTemplatePanelVisual(AliceProjectTemplateWizardPanel panel) {
		initComponents();
		this.panel = panel;
		// Register listener on the textFields to make the automatic updates
		projectNameTextField.getDocument().addDocumentListener(this);
		projectLocationTextField.getDocument().addDocumentListener(this);
		aliceWorldSourceFileTextField.getDocument().addDocumentListener(this);

		loadPanelConstraints = new java.awt.GridBagConstraints();
		loadPanelConstraints.gridx = 0;
		loadPanelConstraints.gridy = 1;
		loadPanelConstraints.gridwidth = 2;
		loadPanelConstraints.fill = java.awt.GridBagConstraints.BOTH;
		loadPanelConstraints.anchor = java.awt.GridBagConstraints.WEST;
		loadPanelConstraints.weightx = 1.0;

		worldsList.setDragEnabled(false);
		worldsList.setEnabled(false);
	}

	public String getProjectName() {
		return this.projectNameTextField.getText();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        loadStyleButtonGroup = new javax.swing.ButtonGroup();
        batchLoadPanel = new javax.swing.JPanel();
        batchLoadLabel = new javax.swing.JLabel();
        batchBrowseButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        worldsList = new javax.swing.JList();
        preserveDirectoryStructureCheckbox = new javax.swing.JCheckBox();
        singleLoadPanel = new javax.swing.JPanel();
        aliceProjectLabel = new javax.swing.JLabel();
        aliceWorldSourceFileTextField = new javax.swing.JTextField();
        aliceWorldBrowseButton = new javax.swing.JButton();
        toNetBeansLabel = new javax.swing.JLabel();
        toNetBeansPanel = new javax.swing.JPanel();
        projectNameLabel = new javax.swing.JLabel();
        projectNameTextField = new javax.swing.JTextField();
        projectLocationLabel = new javax.swing.JLabel();
        projectLocationTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        createdFolderTitleLabel = new javax.swing.JLabel();
        createdFolderContentLabel = new javax.swing.JLabel();
        singleMultipleButtonsPanel = new javax.swing.JPanel();
        loadSingleRadioButton = new javax.swing.JRadioButton();
        loadMultipleRadioButton = new javax.swing.JRadioButton();
        fillerPanel = new javax.swing.JPanel();
        fromAliceLabel = new javax.swing.JLabel();

        batchLoadPanel.setBackground(new java.awt.Color(153, 255, 153));
        batchLoadPanel.setOpaque(false);
        batchLoadPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(batchLoadLabel, org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.batchLoadLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        batchLoadPanel.add(batchLoadLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(batchBrowseButton, org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.batchBrowseButton.text")); // NOI18N
        batchBrowseButton.setActionCommand(org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.batchBrowseButton.actionCommand")); // NOI18N
        batchBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchBrowseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 2, 5);
        batchLoadPanel.add(batchBrowseButton, gridBagConstraints);

        jScrollPane1.setEnabled(false);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(23, 110));

        worldsList.setModel(new javax.swing.DefaultListModel());
        worldsList.setEnabled(false);
        jScrollPane1.setViewportView(worldsList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        batchLoadPanel.add(jScrollPane1, gridBagConstraints);

        preserveDirectoryStructureCheckbox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(preserveDirectoryStructureCheckbox, org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.jCheckBox1.text")); // NOI18N
        preserveDirectoryStructureCheckbox.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        batchLoadPanel.add(preserveDirectoryStructureCheckbox, gridBagConstraints);

        setBackground(new java.awt.Color(255, 204, 102));
        setMinimumSize(new java.awt.Dimension(400, 306));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(400, 306));
        setLayout(new java.awt.GridBagLayout());

        singleLoadPanel.setBackground(new java.awt.Color(204, 102, 255));
        singleLoadPanel.setOpaque(false);
        singleLoadPanel.setLayout(new java.awt.GridBagLayout());

        aliceProjectLabel.setLabelFor(projectLocationTextField);
        org.openide.awt.Mnemonics.setLocalizedText(aliceProjectLabel, org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.aliceProjectLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        singleLoadPanel.add(aliceProjectLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 154;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        singleLoadPanel.add(aliceWorldSourceFileTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(aliceWorldBrowseButton, org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.aliceWorldBrowseButton.text")); // NOI18N
        aliceWorldBrowseButton.setActionCommand(org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.aliceWorldBrowseButton.actionCommand")); // NOI18N
        aliceWorldBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aliceWorldBrowseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        singleLoadPanel.add(aliceWorldBrowseButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(singleLoadPanel, gridBagConstraints);

        toNetBeansLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(toNetBeansLabel, org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.toNetBeansLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 5, 5);
        add(toNetBeansLabel, gridBagConstraints);

        toNetBeansPanel.setBackground(new java.awt.Color(255, 204, 204));
        toNetBeansPanel.setOpaque(false);
        toNetBeansPanel.setLayout(new java.awt.GridBagLayout());

        projectNameLabel.setLabelFor(projectNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel, org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.projectNameLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        toNetBeansPanel.add(projectNameLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 154;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        toNetBeansPanel.add(projectNameTextField, gridBagConstraints);

        projectLocationLabel.setLabelFor(projectLocationTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectLocationLabel, org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.projectLocationLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        toNetBeansPanel.add(projectLocationLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 154;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        toNetBeansPanel.add(projectLocationTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.browseButton.text")); // NOI18N
        browseButton.setActionCommand(org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.browseButton.actionCommand_1")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        toNetBeansPanel.add(browseButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(createdFolderTitleLabel, org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.createdFolderTitleLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        toNetBeansPanel.add(createdFolderTitleLabel, gridBagConstraints);

        createdFolderContentLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        createdFolderContentLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        org.openide.awt.Mnemonics.setLocalizedText(createdFolderContentLabel, org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.createdFolderContentLabel.text")); // NOI18N
        createdFolderContentLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        toNetBeansPanel.add(createdFolderContentLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(toNetBeansPanel, gridBagConstraints);

        singleMultipleButtonsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        loadStyleButtonGroup.add(loadSingleRadioButton);
        loadSingleRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(loadSingleRadioButton, org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.loadSingleRadioButton.text")); // NOI18N
        loadSingleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSingleRadioButtonActionPerformed(evt);
            }
        });
        singleMultipleButtonsPanel.add(loadSingleRadioButton);

        loadStyleButtonGroup.add(loadMultipleRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(loadMultipleRadioButton, org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.loadMultipleRadioButton.text")); // NOI18N
        loadMultipleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMultipleRadioButtonActionPerformed(evt);
            }
        });
        singleMultipleButtonsPanel.add(loadMultipleRadioButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(singleMultipleButtonsPanel, gridBagConstraints);

        fillerPanel.setBackground(new java.awt.Color(153, 153, 255));
        fillerPanel.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        add(fillerPanel, gridBagConstraints);

        fromAliceLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(fromAliceLabel, org.openide.util.NbBundle.getMessage(AliceProjectTemplatePanelVisual.class, "AliceProjectTemplatePanelVisual.fromAliceLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(fromAliceLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
		String command = evt.getActionCommand();
		JTextField fieldToUse = this.projectLocationTextField;
		JFileChooser chooser = new JFileChooser();
		FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
		chooser.setDialogTitle("Select Project Location");
		chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		String path = fieldToUse.getText();
		if (path.length() > 0) {
			File f = new File(path);
			if (f.exists()) {
				chooser.setSelectedFile(f);
			}
		}
		if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
			File projectDir = chooser.getSelectedFile();
			fieldToUse.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
		}
		panel.fireChangeEvent();
    }//GEN-LAST:event_browseButtonActionPerformed

private void aliceWorldBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aliceWorldBrowseButtonActionPerformed
	String command = evt.getActionCommand();
	if ("BROWSE".equals(command)) {
		JFileChooser chooser = new JFileChooser();
		FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
		chooser.setDialogTitle("Select Alice World to Import");
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		chooser.setCurrentDirectory(getMyProjectsDirectory());
		String path = this.aliceWorldSourceFileTextField.getText();
		if (path.length() > 0) {
			File f = new File(path);
			if (f.exists()) {
				chooser.setSelectedFile(f);
			}
		}
		if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
			File aliceWorld = chooser.getSelectedFile();
			if (aliceWorld.isFile() && isAliceFile(aliceWorld)) {
				aliceWorldSourceFileTextField.setText(FileUtil.normalizeFile(aliceWorld).getAbsolutePath());
				String projectName = getProjectNameForFile(aliceWorld.getName());
				projectNameTextField.setText(projectName);
			}
		}
		panel.fireChangeEvent();
	}
}//GEN-LAST:event_aliceWorldBrowseButtonActionPerformed

	public static String getProjectNameForFile(String projectFile) {
		String projectName = new String(projectFile);
		int splitPoint = projectName.lastIndexOf('.');
		if (splitPoint > 0) {
			projectName = projectName.substring(0, splitPoint);
		}
		return projectName;
	}

	private boolean isAliceFile(File worldFile) {
		String extension = edu.cmu.cs.dennisc.java.io.FileUtilities.getExtension(worldFile);
		if (extension != null && extension.equalsIgnoreCase(org.lgna.project.io.IoUtilities.PROJECT_EXTENSION)) {
			return true;
		}
		return false;
	}

	private void setWorldList(List<File> worlds) {
		DefaultListModel model = (DefaultListModel) this.worldsList.getModel();
		for (File world : worlds) {
			model.addElement(world);
		}
	}

	private void addFileToWorldList(File world) {
		DefaultListModel model = (DefaultListModel) this.worldsList.getModel();
		if (world.isFile() && isAliceFile(world)) {
			model.addElement(world);
		} else if (world.isDirectory()) {
			for (File subWorld : world.listFiles()) {
				addFileToWorldList(subWorld);
			}
		}
	}

	private void clearWorldList() {
		DefaultListModel model = (DefaultListModel) this.worldsList.getModel();
		model.clear();
	}

	private static java.io.File getMyProjectsDirectory() {
		return new File(FileUtilities.getDefaultDirectory(), "Alice3/MyProjects");
	}
private void batchBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchBrowseButtonActionPerformed
	String command = evt.getActionCommand();
	if ("BATCH".equals(command)) {
		JFileChooser chooser = new JFileChooser();
		FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
		chooser.setDialogTitle("Select Alice Worlds to Import");
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		chooser.setCurrentDirectory(getMyProjectsDirectory());
		chooser.setMultiSelectionEnabled(true);
		String path = this.aliceWorldSourceFileTextField.getText();
		if (path.length() > 0) {
			File f = new File(path);
			if (f.exists()) {
				chooser.setSelectedFile(f);
			}
		}
		if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
			File[] aliceWorlds = chooser.getSelectedFiles();
			this.clearWorldList();
			for (File world : aliceWorlds) {
				if (world.exists() && world.canRead()) {
					this.addFileToWorldList(world);
				}
			}
			if (aliceWorlds.length == 1 && aliceWorlds[0].isDirectory()) {
				this.baseDir = aliceWorlds[0];
			} else if (aliceWorlds.length != 0) {
				this.baseDir = aliceWorlds[0].getParentFile();
			}
		}
		panel.fireChangeEvent();
	}
}//GEN-LAST:event_batchBrowseButtonActionPerformed
	private String createFolderString;
	private String projectNameString;
	private boolean isSingle = true;

	private void setLoadType() {
		if (this.loadSingleRadioButton.isSelected() && !isSingle) {
			this.remove(this.batchLoadPanel);
			this.add(this.singleLoadPanel, this.loadPanelConstraints);
			this.projectNameLabel.setEnabled(true);
			this.projectNameTextField.setEnabled(true);
			this.createdFolderTitleLabel.setEnabled(true);
			this.createdFolderContentLabel.setEnabled(true);
			this.createdFolderContentLabel.setText(this.createFolderString);
			this.projectNameTextField.setText(this.projectNameString);
			this.isSingle = true;
		} else {
			this.remove(this.singleLoadPanel);
			this.add(this.batchLoadPanel, this.loadPanelConstraints);
			this.projectNameLabel.setEnabled(false);
			this.projectNameTextField.setEnabled(false);
			this.createdFolderTitleLabel.setEnabled(false);
			this.createdFolderContentLabel.setEnabled(false);
			this.createFolderString = this.createdFolderContentLabel.getText();
			this.createdFolderContentLabel.setText("Project folder names will be automatically generated.");
			this.projectNameString = this.projectNameTextField.getText();
			this.projectNameTextField.setText("Project names will be automatically generated.");
			this.isSingle = false;
		}
		this.revalidate();
		panel.fireChangeEvent();
	}

private void loadSingleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSingleRadioButtonActionPerformed
	setLoadType();
}//GEN-LAST:event_loadSingleRadioButtonActionPerformed

private void loadMultipleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMultipleRadioButtonActionPerformed
	setLoadType();
}//GEN-LAST:event_loadMultipleRadioButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aliceProjectLabel;
    private javax.swing.JButton aliceWorldBrowseButton;
    private javax.swing.JTextField aliceWorldSourceFileTextField;
    private javax.swing.JButton batchBrowseButton;
    private javax.swing.JLabel batchLoadLabel;
    private javax.swing.JPanel batchLoadPanel;
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel createdFolderContentLabel;
    private javax.swing.JLabel createdFolderTitleLabel;
    private javax.swing.JPanel fillerPanel;
    private javax.swing.JLabel fromAliceLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton loadMultipleRadioButton;
    private javax.swing.JRadioButton loadSingleRadioButton;
    private javax.swing.ButtonGroup loadStyleButtonGroup;
    private javax.swing.JCheckBox preserveDirectoryStructureCheckbox;
    private javax.swing.JLabel projectLocationLabel;
    private javax.swing.JTextField projectLocationTextField;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JTextField projectNameTextField;
    private javax.swing.JPanel singleLoadPanel;
    private javax.swing.JPanel singleMultipleButtonsPanel;
    private javax.swing.JLabel toNetBeansLabel;
    private javax.swing.JPanel toNetBeansPanel;
    private javax.swing.JList worldsList;
    // End of variables declaration//GEN-END:variables

	@Override
	public void addNotify() {
		super.addNotify();
		//same problem as in 31086, initial focus on Cancel button
		projectNameTextField.requestFocus();
	}

	public static List<File> getWorldsFromBatchString(String batchString) {
		List<File> worldFiles = new LinkedList<File>();
		if (batchString != null) {
			String[] worldFileNameArray = batchString.split(";");
			for (String worldFileName : worldFileNameArray) {
				worldFileName = worldFileName.trim();
				File worldFile = new File(worldFileName);
				worldFiles.add(worldFile);
			}
		}
		return worldFiles;
	}

	public static String turnWorldListIntoBatchString(List<File> files) {
		StringBuilder sb = new StringBuilder();
		for (File file : files) {
			sb.append(file.getAbsolutePath() + ";");
		}
		return sb.toString();
	}

	private List<File> getSelectedWorldFiles() {
		DefaultListModel model = (DefaultListModel) this.worldsList.getModel();
		List<File> fileList = new LinkedList<File>();
		for (Object file : model.toArray()) {
			if (file instanceof File) {
				fileList.add((File) file);
			}
		}
		return fileList;
	}

	private String isDirectoryValid(String path) {
		if (path == null) {
			return "NULL";
		}
		if (path.length() == 0) {
			return "EMPTY";
		}
		boolean isValid = true;
		String isValidReason = "";
		File pathFile = new File(path);
		if (pathFile.exists()) {
			if (!pathFile.canWrite()) {
				return "CANNOT WRITE";
			} else {
				return null;
			}
		}
		LinkedList<File> filesToMake = new LinkedList<File>();
		File currentFile = pathFile;
		while (currentFile != null && !currentFile.exists()) {
			filesToMake.addFirst(currentFile);
			currentFile = currentFile.getParentFile();
		}
		LinkedList<File> filesToDelete = new LinkedList<File>();
		for (File fileToMake : filesToMake) {
			try {
				boolean madeIt = fileToMake.mkdir();
				if (!madeIt) {
					isValidReason = "FAILED TO MAKE: " + fileToMake;
					isValid = false;
					break;
				} else {
					filesToDelete.addFirst(fileToMake);
				}
			} catch (Exception e) {
				isValidReason = "FAILED TO MAKE: " + fileToMake;
				isValid = false;
				break;
			}
		}
		for (File fileToDelete : filesToDelete) {
			fileToDelete.delete();
		}
		if (isValid) {
			isValidReason = null;
		}
		return isValidReason;
	}

	boolean valid(WizardDescriptor wizardDescriptor) {
		this.projectLocationLabel.setForeground(Color.BLACK);
		this.projectNameLabel.setForeground(Color.BLACK);
		this.aliceProjectLabel.setForeground(Color.BLACK);
		this.createdFolderTitleLabel.setForeground(Color.BLACK);
		this.batchLoadLabel.setForeground(Color.BLACK);



		if (this.loadMultipleRadioButton.isSelected()) {
			List<File> worldFiles = getSelectedWorldFiles();
			boolean hasValidWorld = false;
			for (File world : worldFiles) {
				if (world.exists() && world.canRead()) {
					hasValidWorld = true;
					break;
				}
			}
			if (!hasValidWorld) {
				this.batchLoadLabel.setForeground(Color.RED);
				wizardDescriptor.putProperty("WizardPanel_errorMessage",
						"No valid worlds selected.");
				return false;
			}
			String failure = isDirectoryValid(this.projectLocationTextField.getText());
			if (failure != null) {
				this.projectLocationLabel.setForeground(Color.RED);
				String message = "Project Location is not a valid directory. Select a new location.";
//                String message = failure;
				wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
				return false;
			}
		} else {

			String aliceFile = aliceWorldSourceFileTextField.getText().trim();
			if (aliceFile.length() == 0) {
				this.aliceProjectLabel.setForeground(Color.RED);
				wizardDescriptor.putProperty("WizardPanel_errorMessage",
						"Alice world is not set yet.");
				return false;
			} else {
				File aliceWorldFile = new File(aliceFile);
				if (!aliceWorldFile.exists()) {
					this.aliceProjectLabel.setForeground(Color.RED);
					wizardDescriptor.putProperty("WizardPanel_errorMessage",
							"Alice world cannot be loaded.");
					return false;
				}
			}

			if (projectNameTextField.getText().length() == 0) {
				this.projectNameLabel.setForeground(Color.RED);
				wizardDescriptor.putProperty("WizardPanel_errorMessage",
						"Project Name cannot be empty.");
				return false; // Display name not specified

			}
			String failure = isDirectoryValid(this.projectLocationTextField.getText());
			if (failure != null) {
				this.projectLocationLabel.setForeground(Color.RED);
				String message = "Project Location is not a valid directory. Selected a new location.";
//                message = failure;
				wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
				return false;
			}
			failure = isDirectoryValid(this.createdFolderContentLabel.getText());
			if (failure != null) {
				this.projectNameLabel.setForeground(Color.RED);
				String message = "Project Folder is not a valid directory. Give the project a different name.";
//                message = failure;
				wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
				return false;
			}

			final File destFolder = FileUtil.normalizeFile(new File(createdFolderContentLabel.getText()).getAbsoluteFile());
			File[] kids = destFolder.listFiles();
			if (destFolder.exists() && kids != null && kids.length > 0) {
				this.projectNameLabel.setForeground(Color.RED);
				wizardDescriptor.putProperty("WizardPanel_errorMessage",
						"A project with that name already exists and is not empty. Change the Project Name.");
				return false;
			}
		}
		wizardDescriptor.putProperty("WizardPanel_errorMessage", "");
		return true;
	}

	private String getBatchString() {
		List<File> worldFiles = this.getSelectedWorldFiles();
		String batchString = turnWorldListIntoBatchString(worldFiles);
		return batchString;
	}

	void store(WizardDescriptor d) {
		String name = (isSingle) ? projectNameTextField.getText().trim() : projectNameString.trim();
		String folder = (isSingle) ? createdFolderContentLabel.getText().trim() : createFolderString.trim();
		String aliceFile = aliceWorldSourceFileTextField.getText().trim();
		String batchString = getBatchString();

		String baseProjectDir = projectLocationTextField.getText();
		d.putProperty("projdir", new File(folder));
		d.putProperty("baseProjDir", new File(baseProjectDir));
		d.putProperty("name", name);
		File aliceWorldFile = new File(aliceFile);
		if (aliceWorldFile.exists()) {
			d.putProperty("aliceWorld", new File(aliceFile));
		}
		d.putProperty("batchString", batchString);
		d.putProperty("singleWorld", new Boolean(this.loadSingleRadioButton.isSelected()));
		d.putProperty("multiWorld", new Boolean(this.loadMultipleRadioButton.isSelected()));
		d.putProperty("preserveDirs", new Boolean(this.preserveDirectoryStructureCheckbox.isSelected()));

		if (this.baseDir != null) {
			d.putProperty("baseDir", this.baseDir.getAbsolutePath());
		} else {
			d.putProperty("baseDir", "");
		}

	}

	void read(WizardDescriptor settings) {

		File projectLocation = (File) settings.getProperty("projdir");
		File rootProjectLocation = (File) settings.getProperty("baseProjDir");
		if (rootProjectLocation == null || !rootProjectLocation.isDirectory()) {
			if (projectLocation == null || projectLocation.getParentFile() == null || !projectLocation.getParentFile().isDirectory()) {

				projectLocation = ProjectChooser.getProjectsFolder();
			} else {
				projectLocation = projectLocation.getParentFile();
			}
		} else {
			projectLocation = rootProjectLocation;
		}
		this.projectLocationTextField.setText(projectLocation.getAbsolutePath());

		String projectName = (String) settings.getProperty("name");
		if (projectName == null) {
			projectName = "AliceProjectTemplate";
		}

		File aliceWorld = (File) settings.getProperty("aliceWorld");
		if (aliceWorld != null && aliceWorld.canRead()) {
			this.aliceWorldSourceFileTextField.setText(aliceWorld.getAbsolutePath());
		} else {
			this.aliceWorldSourceFileTextField.setText("");
		}
		this.projectNameTextField.setText(projectName);
		this.projectNameString = projectName;
		this.projectNameTextField.selectAll();

		String batchString = (String) settings.getProperty("batchString");
		List<File> worlds = getWorldsFromBatchString(batchString);
		this.setWorldList(worlds);

		Boolean isSingleSelected = (Boolean) settings.getProperty("singleWorld");
		Boolean isMultiSelected = (Boolean) settings.getProperty("multiWorld");
		Boolean preserveDirs = (Boolean) settings.getProperty("preserveDirs");

		if (isSingleSelected != null && isMultiSelected != null) {
			this.loadSingleRadioButton.setSelected(isSingleSelected);
			this.loadMultipleRadioButton.setSelected(isMultiSelected);
		} else {
			this.loadSingleRadioButton.setSelected(true);
			this.loadMultipleRadioButton.setSelected(false);
		}
		if (preserveDirs != null) {
			this.preserveDirectoryStructureCheckbox.setSelected(preserveDirs);
		} else {
			this.preserveDirectoryStructureCheckbox.setSelected(true);
		}

		String baseDirString = (String) settings.getProperty("baseDir");
		if (baseDirString == null || baseDirString.length() == 0) {
			this.baseDir = null;
		} else {
			this.baseDir = new File(baseDirString);
		}
	}

	void validate(WizardDescriptor d) throws WizardValidationException {
		// nothing to validate
	}

	// Implementation of DocumentListener --------------------------------------
	public void changedUpdate(DocumentEvent e) {
		updateTexts(e);
		if (this.projectNameTextField.getDocument() == e.getDocument()) {
			firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
		}
	}

	public void insertUpdate(DocumentEvent e) {
		updateTexts(e);
		if (this.projectNameTextField.getDocument() == e.getDocument()) {
			firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
		}
	}

	public void removeUpdate(DocumentEvent e) {
		updateTexts(e);
		if (this.projectNameTextField.getDocument() == e.getDocument()) {
			firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
		}
	}

	/** Handles changes in the Project name and project directory, */
	private void updateTexts(DocumentEvent e) {

		if (this.loadSingleRadioButton.isSelected()) {
			Document doc = e.getDocument();

			if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {
				// Change in the project name

				String projectName = projectNameTextField.getText();
				String projectFolder = projectLocationTextField.getText();

				//if (projectFolder.trim().length() == 0 || projectFolder.equals(oldName)) {
				createdFolderContentLabel.setText(projectFolder + File.separatorChar + projectName);
				//}

			}
			panel.fireChangeEvent(); // Notify that the panel changed
		}
	}
}
