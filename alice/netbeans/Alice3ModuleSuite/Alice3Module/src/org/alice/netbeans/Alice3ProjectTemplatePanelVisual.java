/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.alice.netbeans;

import edu.cmu.cs.dennisc.java.io.FileUtilities;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.filesystems.FileUtil;

public class Alice3ProjectTemplatePanelVisual extends JPanel implements DocumentListener {

	public static final String PROP_PROJECT_NAME = "projectName";

	private Alice3ProjectTemplateWizardPanel panel;

	public Alice3ProjectTemplatePanelVisual(Alice3ProjectTemplateWizardPanel panel) {
		initComponents();
		this.panel = panel;
		// Register listener on the textFields to make the automatic updates
		projectNameTextField.getDocument().addDocumentListener(this);
		projectLocationTextField.getDocument().addDocumentListener(this);
		aliceWorldLocationTextField.getDocument().addDocumentListener(this);
	}

	public String getProjectName() {
		return this.projectNameTextField.getText();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectNameLabel = new javax.swing.JLabel();
        projectNameTextField = new javax.swing.JTextField();
        projectLocationLabel = new javax.swing.JLabel();
        projectLocationTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        createdFolderLabel = new javax.swing.JLabel();
        createdFolderTextField = new javax.swing.JTextField();
        toNetBeansHeaderLabel = new javax.swing.JLabel();
        aliceWorldLocationLabel = new javax.swing.JLabel();
        aliceWorldLocationTextField = new javax.swing.JTextField();
        aliceWorldBrowseButton = new javax.swing.JButton();
        fromAliceHeaderLabel = new javax.swing.JLabel();

        projectNameLabel.setLabelFor(projectNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel, org.openide.util.NbBundle.getMessage(Alice3ProjectTemplatePanelVisual.class, "Alice3ProjectTemplatePanelVisual.projectNameLabel.text")); // NOI18N

        projectLocationLabel.setLabelFor(projectLocationTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectLocationLabel, org.openide.util.NbBundle.getMessage(Alice3ProjectTemplatePanelVisual.class, "Alice3ProjectTemplatePanelVisual.projectLocationLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(Alice3ProjectTemplatePanelVisual.class, "Alice3ProjectTemplatePanelVisual.browseButton.text")); // NOI18N
        browseButton.setActionCommand(org.openide.util.NbBundle.getMessage(Alice3ProjectTemplatePanelVisual.class, "Alice3ProjectTemplatePanelVisual.browseButton.actionCommand")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        createdFolderLabel.setLabelFor(createdFolderTextField);
        org.openide.awt.Mnemonics.setLocalizedText(createdFolderLabel, org.openide.util.NbBundle.getMessage(Alice3ProjectTemplatePanelVisual.class, "Alice3ProjectTemplatePanelVisual.createdFolderLabel.text")); // NOI18N

        createdFolderTextField.setEditable(false);

        toNetBeansHeaderLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(toNetBeansHeaderLabel, org.openide.util.NbBundle.getMessage(Alice3ProjectTemplatePanelVisual.class, "Alice3ProjectTemplatePanelVisual.toNetBeansHeaderLabel.text")); // NOI18N

        aliceWorldLocationLabel.setLabelFor(aliceWorldLocationTextField);
        org.openide.awt.Mnemonics.setLocalizedText(aliceWorldLocationLabel, org.openide.util.NbBundle.getMessage(Alice3ProjectTemplatePanelVisual.class, "Alice3ProjectTemplatePanelVisual.aliceWorldLocationLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(aliceWorldBrowseButton, org.openide.util.NbBundle.getMessage(Alice3ProjectTemplatePanelVisual.class, "Alice3ProjectTemplatePanelVisual.aliceWorldBrowseButton.text")); // NOI18N
        aliceWorldBrowseButton.setActionCommand(org.openide.util.NbBundle.getMessage(Alice3ProjectTemplatePanelVisual.class, "Alice3ProjectTemplatePanelVisual.aliceWorldBrowseButton.actionCommand")); // NOI18N
        aliceWorldBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aliceWorldBrowseButtonActionPerformed(evt);
            }
        });

        fromAliceHeaderLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(fromAliceHeaderLabel, org.openide.util.NbBundle.getMessage(Alice3ProjectTemplatePanelVisual.class, "Alice3ProjectTemplatePanelVisual.fromAliceHeaderLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(toNetBeansHeaderLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fromAliceHeaderLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(projectNameLabel)
                                    .addComponent(projectLocationLabel)
                                    .addComponent(createdFolderLabel)
                                    .addComponent(aliceWorldLocationLabel))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(aliceWorldLocationTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aliceWorldBrowseButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(projectNameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                    .addComponent(projectLocationTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                    .addComponent(createdFolderTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseButton)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(fromAliceHeaderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aliceWorldLocationLabel)
                    .addComponent(aliceWorldLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aliceWorldBrowseButton))
                .addGap(18, 18, 18)
                .addComponent(toNetBeansHeaderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectNameLabel)
                    .addComponent(projectNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectLocationLabel)
                    .addComponent(projectLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createdFolderLabel)
                    .addComponent(createdFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 137, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
		String command = evt.getActionCommand();
		if ("BROWSE".equals(command)) {
			JFileChooser chooser = new JFileChooser();
			FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
			chooser.setDialogTitle("Select Project Location");
			chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
			String path = this.projectLocationTextField.getText();
			if (path.length() > 0) {
				File f = new File(path);
				if (f.exists()) {
					chooser.setSelectedFile(f);
				}
			}
			if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
				File projectDir = chooser.getSelectedFile();
				projectLocationTextField.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
			}
			panel.fireChangeEvent();
		}

    }//GEN-LAST:event_browseButtonActionPerformed
	private static java.io.File getMyProjectsDirectory() {
		return new File(FileUtilities.getDefaultDirectory(), "Alice3/MyProjects");
	}

	private static String getProjectNameForFile(String projectFile) {
		int splitPoint = projectFile.lastIndexOf('.');
		if (splitPoint > 0) {
			return projectFile.substring(0, splitPoint);
		} else {
			return projectFile;
		}
	}

	private static boolean isAliceFile(File worldFile) {
		String extension = edu.cmu.cs.dennisc.java.io.FileUtilities.getExtension(worldFile);
		return (extension != null && extension.equalsIgnoreCase(org.lgna.project.io.IoUtilities.PROJECT_EXTENSION));
	}

    private void aliceWorldBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aliceWorldBrowseButtonActionPerformed
		String command = evt.getActionCommand();
		if ("BROWSE".equals(command)) {
			JFileChooser chooser = new JFileChooser();
			FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
			chooser.setDialogTitle("Select Alice Project to Import");
			//chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
			chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
			chooser.setCurrentDirectory(getMyProjectsDirectory());
			String path = this.aliceWorldLocationTextField.getText();
			if (path.length() > 0) {
				File f = new File(path);
				if (f.exists()) {
					chooser.setSelectedFile(f);
				}
			}
			if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
				File aliceWorld = chooser.getSelectedFile();
				if (aliceWorld.isFile() && isAliceFile(aliceWorld)) {
					aliceWorldLocationTextField.setText(FileUtil.normalizeFile(aliceWorld).getAbsolutePath());
					String projectName = getProjectNameForFile(aliceWorld.getName());
					projectNameTextField.setText(projectName);
				}
			}
			panel.fireChangeEvent();
		}
    }//GEN-LAST:event_aliceWorldBrowseButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aliceWorldBrowseButton;
    private javax.swing.JLabel aliceWorldLocationLabel;
    private javax.swing.JTextField aliceWorldLocationTextField;
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel createdFolderLabel;
    private javax.swing.JTextField createdFolderTextField;
    private javax.swing.JLabel fromAliceHeaderLabel;
    private javax.swing.JLabel projectLocationLabel;
    private javax.swing.JTextField projectLocationTextField;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JTextField projectNameTextField;
    private javax.swing.JLabel toNetBeansHeaderLabel;
    // End of variables declaration//GEN-END:variables

	@Override
	public void addNotify() {
		super.addNotify();
		if (true) {
			final File file = new File(FileUtilities.getDefaultDirectory(), "Alice3/MyProjects/a.a3p");
			if (file.exists()) {
				SwingUtilities.invokeLater(new Runnable() {
					@Override
					public void run() {
						aliceWorldLocationTextField.setText(file.getAbsolutePath());
						String projectName = getProjectNameForFile(file.getName());
						projectNameTextField.setText(projectName);
					}
				});
			}
		}
		//same problem as in 31086, initial focus on Cancel button
		projectNameTextField.requestFocus();
		projectNameTextField.selectAll();
	}

	boolean valid(WizardDescriptor wizardDescriptor) {
		String aliceFile = aliceWorldLocationTextField.getText().trim();
		if (aliceFile.length() == 0) {
			//this.aliceWorldLocationLabel.setForeground(Color.RED);
			wizardDescriptor.putProperty("WizardPanel_errorMessage", "Alice Project Location is not set yet.");
			return false;
		}
		File aliceWorldFile = new File(aliceFile);
		if (!aliceWorldFile.exists()) {
			//this.aliceWorldLocationLabel.setForeground(Color.RED);
			wizardDescriptor.putProperty("WizardPanel_errorMessage", "Alice Project " + aliceFile + " does not exist.");
			return false;
		}

		if (projectNameTextField.getText().length() == 0) {
			// TODO if using org.openide.dialogs >= 7.8, can use WizardDescriptor.PROP_ERROR_MESSAGE:
			wizardDescriptor.putProperty("WizardPanel_errorMessage", "Project Name is not a valid folder name.");
			return false; // Display name not specified
		}
		File f = FileUtil.normalizeFile(new File(projectLocationTextField.getText()).getAbsoluteFile());
		if (!f.isDirectory()) {
			wizardDescriptor.putProperty("WizardPanel_errorMessage", "Project Folder is not a valid path.");
			return false;
		}
		final File destFolder = FileUtil.normalizeFile(new File(createdFolderTextField.getText()).getAbsoluteFile());

		File projLoc = destFolder;
		while (projLoc != null && !projLoc.exists()) {
			projLoc = projLoc.getParentFile();
		}
		if (projLoc == null || !projLoc.canWrite()) {
			wizardDescriptor.putProperty("WizardPanel_errorMessage", "Project Folder cannot be created.");
			return false;
		}

		if (FileUtil.toFileObject(projLoc) == null) {
			wizardDescriptor.putProperty("WizardPanel_errorMessage", "Project Folder is not a valid path.");
			return false;
		}

		File[] kids = destFolder.listFiles();
		if (destFolder.exists() && kids != null && kids.length > 0) {
			// Folder exists and is not empty
			wizardDescriptor.putProperty("WizardPanel_errorMessage", "Project Folder already exists and is not empty.");
			return false;
		}
		wizardDescriptor.putProperty("WizardPanel_errorMessage", "");
		return true;
	}

	void store(WizardDescriptor d) {
		String aliceFile = aliceWorldLocationTextField.getText().trim();
		String name = projectNameTextField.getText().trim();
		String folder = createdFolderTextField.getText().trim();

		d.putProperty("aliceProjectFile", new File(aliceFile));
		d.putProperty("projdir", new File(folder));
		d.putProperty("name", name);
	}

	void read(WizardDescriptor settings) {
		File projectLocation = (File) settings.getProperty("projdir");
		if (projectLocation == null || projectLocation.getParentFile() == null || !projectLocation.getParentFile().isDirectory()) {
			projectLocation = ProjectChooser.getProjectsFolder();
		} else {
			projectLocation = projectLocation.getParentFile();
		}
		this.projectLocationTextField.setText(projectLocation.getAbsolutePath());

		String projectName = (String) settings.getProperty("name");
//		if (projectName == null) {
//			projectName = "Alice3ProjectTemplate";
//		}
		this.projectNameTextField.setText(projectName);
		this.projectNameTextField.selectAll();
	}

	void validate(WizardDescriptor d) throws WizardValidationException {
		// nothing to validate
	}

	// Implementation of DocumentListener --------------------------------------
	public void changedUpdate(DocumentEvent e) {
		updateTexts(e);
		if (this.projectNameTextField.getDocument() == e.getDocument()) {
			firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
		}
	}

	public void insertUpdate(DocumentEvent e) {
		updateTexts(e);
		if (this.projectNameTextField.getDocument() == e.getDocument()) {
			firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
		}
	}

	public void removeUpdate(DocumentEvent e) {
		updateTexts(e);
		if (this.projectNameTextField.getDocument() == e.getDocument()) {
			firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
		}
	}

	/**
	 * Handles changes in the Project name and project directory,
	 */
	private void updateTexts(DocumentEvent e) {

		Document doc = e.getDocument();

		if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {
			// Change in the project name

			String projectName = projectNameTextField.getText();
			String projectFolder = projectLocationTextField.getText();

			//if (projectFolder.trim().length() == 0 || projectFolder.equals(oldName)) {
			createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);
			//}

		}
		panel.fireChangeEvent(); // Notify that the panel changed
	}

}
