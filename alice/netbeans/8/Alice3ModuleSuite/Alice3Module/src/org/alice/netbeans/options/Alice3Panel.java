/*******************************************************************************
 * Copyright (c) 2006, 2016, Carnegie Mellon University. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Products derived from the software may not be called "Alice", nor may
 *    "Alice" appear in their name, without prior written permission of
 *    Carnegie Mellon University.
 *
 * 4. All advertising materials mentioning features or use of this software must
 *    display the following acknowledgement: "This product includes software
 *    developed by Carnegie Mellon University"
 *
 * 5. The gallery of art assets and animations provided with this software is
 *    contributed by Electronic Arts Inc. and may be used for personal,
 *    non-commercial, and academic use only. Redistributions of any program
 *    source code that utilizes The Sims 2 Assets must also retain the copyright
 *    notice, list of conditions and the disclaimer contained in
 *    The Alice 3.0 Art Gallery License.
 *
 * DISCLAIMER:
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
 * ANY AND ALL EXPRESS, STATUTORY OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A
 * PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT
 * SHALL THE AUTHORS, COPYRIGHT OWNERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, PUNITIVE OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING FROM OR OTHERWISE RELATING TO
 * THE USE OF OR OTHER DEALINGS WITH THE SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *******************************************************************************/

package org.alice.netbeans.options;

import java.util.prefs.Preferences;

final class Alice3Panel extends javax.swing.JPanel {

	private final Alice3OptionsPanelController controller;

	Alice3Panel(Alice3OptionsPanelController controller) {
		this.controller = controller;
		initComponents();
		// TODO listen to changes in form fields and call controller.changed()
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCollapseImportsCheckBox = new javax.swing.JCheckBox();
        jCollapseBoilerPlateMethodsCheckBox = new javax.swing.JCheckBox();
        jOfferCleanSlateCheckBox = new javax.swing.JCheckBox();

        jCollapseImportsCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jCollapseImportsCheckBox, org.openide.util.NbBundle.getMessage(Alice3Panel.class, "Alice3Panel.jCollapseImportsCheckBox.text")); // NOI18N

        jCollapseBoilerPlateMethodsCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jCollapseBoilerPlateMethodsCheckBox, org.openide.util.NbBundle.getMessage(Alice3Panel.class, "Alice3Panel.jCollapseBoilerPlateMethodsCheckBox.text")); // NOI18N

        jOfferCleanSlateCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jOfferCleanSlateCheckBox, org.openide.util.NbBundle.getMessage(Alice3Panel.class, "Alice3Panel.jOfferCleanSlateCheckBox.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCollapseImportsCheckBox)
                    .addComponent(jCollapseBoilerPlateMethodsCheckBox)
                    .addComponent(jOfferCleanSlateCheckBox))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jCollapseImportsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCollapseBoilerPlateMethodsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jOfferCleanSlateCheckBox)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	void load() {
		Preferences preferences = Preferences.userNodeForPackage(Alice3Panel.class);
		this.jCollapseImportsCheckBox.setSelected(preferences.getBoolean(Alice3OptionsPanelController.COLLAPSE_IMPORTS_KEY, true));
		this.jCollapseBoilerPlateMethodsCheckBox.setSelected(preferences.getBoolean(Alice3OptionsPanelController.COLLAPSE_BOILER_PLATE_METHODS_KEY, true));
		this.jOfferCleanSlateCheckBox.setSelected(preferences.getBoolean(Alice3OptionsPanelController.OFFER_CLEAN_SLATE_METHODS_KEY, true));
	}

	void store() {
		Preferences preferences = Preferences.userNodeForPackage(Alice3Panel.class);
		preferences.putBoolean(Alice3OptionsPanelController.COLLAPSE_IMPORTS_KEY, this.jCollapseImportsCheckBox.isSelected());
		preferences.putBoolean(Alice3OptionsPanelController.COLLAPSE_BOILER_PLATE_METHODS_KEY, this.jCollapseBoilerPlateMethodsCheckBox.isSelected());
		preferences.putBoolean(Alice3OptionsPanelController.OFFER_CLEAN_SLATE_METHODS_KEY, this.jOfferCleanSlateCheckBox.isSelected());
	}

	boolean valid() {
		// TODO check whether form is consistent and complete
		return true;
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCollapseBoilerPlateMethodsCheckBox;
    private javax.swing.JCheckBox jCollapseImportsCheckBox;
    private javax.swing.JCheckBox jOfferCleanSlateCheckBox;
    // End of variables declaration//GEN-END:variables
}
