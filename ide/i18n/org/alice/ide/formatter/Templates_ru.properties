AbstractDeclaration = </getName()/>
AbstractConstructor = </getDeclaringType()/>
UserLocal = </getValidName()/>
UserLambda = \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\n\t</body/>

ExpressionStatement = </expression/>
BlockStatement = </statements/>
ConstructorBlockStatement = </constructorInvocationStatement/>\n</statements/>
WhileLoop = \u043f\u043e\u043a\u0430 </conditional/> \u0438\u0441\u0442\u0438\u043d\u043d\u043e\n\t</body/>\n\t \u0446\u0438\u043a\u043b
ForEachInArrayLoop = for each </__item__/> in </array/>\n\t</body/>\n\t loop
CountLoop = \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c </count/> \u0440\u0430\u0437\n\t</body/>\n\t \u0446\u0438\u043a\u043b
BooleanExpressionBodyPair = \u0435\u0441\u043b\u0438 </expression/> \u0438\u0441\u0442\u0438\u043d\u043d\u043e, \u0442\u043e\n\t</body/>
ConditionalStatement = </booleanExpressionBodyPairs/>\n\u0438\u043d\u0430\u0447\u0435\n\t</elseBody/>
DoTogether = \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\n\t</body/>
DoInOrder = \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\n\t</body/>
LocalDeclarationStatement = </__local__/> </_gets_toward_leading_/> </initializer/>
Comment = // </text/>
EachInArrayTogether = each </__item__/> in </array/> together\n\t</body/>
ReturnStatement = \u0432\u0435\u0440\u043d\u0443\u0442\u044c </expression/>
SuperConstructorInvocationStatement = super </requiredArguments/></variableArguments/></keyedArguments/>
ThisConstructorInvocationStatement = this </requiredArguments/></variableArguments/></keyedArguments/>

AbstractValueLiteral = </value/>
StringLiteral = "</value/>"
NullLiteral = \u043d\u0435\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e
ThisExpression = \u044d\u0442\u043e
SuperExpression = super
TypeExpression = 
MethodInvocation = </expression/> </method/> </requiredArguments/></variableArguments/></keyedArguments/>
FieldAccess = </expression/> </field/>
LocalAccess = </local/>
ParameterAccess = </parameter/>
ArrayAccess = </array/>[ </index/> ]
ArrayLength = </array/>.\u0440\u0430\u0437\u043c\u0435\u0440
AssignmentExpression = </leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>
InfixExpression = </leftOperand/> </operator/> </rightOperand/>
LogicalComplement = \u041d\u0415 </operand/>
InstanceCreation = construct new </constructor/> </requiredArguments/></variableArguments/></keyedArguments/>
ArrayInstanceCreation = \u043d\u043e\u0432\u044b\u0439 </arrayType/> { </expressions/> }
StringConcatenation = </leftOperand/> + </rightOperand/>
ResourceExpression = </resource/>
LambdaExpression = </value/>

Argument = </getParameterNameText()/></expression/>
