AbstractDeclaration = </getName()/>
AbstractConstructor = </getDeclaringType()/>
UserLocal = </getValidName()/>
UserLambda = fazer na ordem\n\t</body/>

ExpressionStatement = </expression/>
BlockStatement = </statements/>
ConstructorBlockStatement = </constructorInvocationStatement/>\n</statements/>
WhileLoop = enquanto </conditional/> for verdade\n\t</body/>\n\t loop
ForEachInArrayLoop = for each </__item__/> in </array/>\n\t</body/>\n\t loop
CountLoop = contador de </count/>\n\t</body/>\n\t loop
BooleanExpressionBodyPair = se </expression/> é verdadeira então\n\t</body/>
ConditionalStatement = </booleanExpressionBodyPairs/>\nelse\n\t</elseBody/>
DoTogether = fazer junto\n\t</body/>
DoInOrder = fazer na ordem\n\t</body/>
LocalDeclarationStatement = </__local__/> </_gets_toward_leading_/> </initializer/>
Comment = // </text/>
EachInArrayTogether = each </__item__/> in </array/> together\n\t</body/>
ReturnStatement = retornar </expression/>
SuperConstructorInvocationStatement = super </requiredArguments/></variableArguments/></keyedArguments/>
ThisConstructorInvocationStatement = this </requiredArguments/></variableArguments/></keyedArguments/>

AbstractValueLiteral = </value/>
StringLiteral = "</value/>"
NullLiteral = nulo
ThisExpression = isso
SuperExpression = super
TypeExpression = 
MethodInvocation = </expression/> </method/> </requiredArguments/></variableArguments/></keyedArguments/>
FieldAccess = </expression/> </field/>
LocalAccess = </local/>
ParameterAccess = </parameter/>
ArrayAccess = </array/>[ </index/> ]
ArrayLength = </array/>.comprimento
AssignmentExpression = </leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>
InfixExpression = </leftOperand/> </operator/> </rightOperand/>
LogicalComplement = NOT </operand/>
InstanceCreation = construct new </constructor/> </requiredArguments/></variableArguments/></keyedArguments/>
ArrayInstanceCreation = novo </arrayType/> { </expressions/> }
StringConcatenation = </leftOperand/> + </rightOperand/>
ResourceExpression = </resource/>
LambdaExpression = </value/>

Argument = </getParameterNameText()/></expression/>