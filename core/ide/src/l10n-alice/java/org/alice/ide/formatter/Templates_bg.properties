AbstractDeclaration=</getName()/>
AbstractConstructor=</getDeclaringType()/>
UserLocal=</getValidName()/>
ExpressionStatement=</expression/>
BlockStatement=</statements/>
ConstructorBlockStatement=</constructorInvocationStatement/>\n</statements/>
LocalDeclarationStatement=</__local__/> </_gets_toward_leading_/> </initializer/>
Comment=// </text/>
ReturnStatement=\u0432\u044A\u0440\u043D\u0438 </expression/>
SuperConstructorInvocationStatement=\u0441\u0443\u043F\u0435\u0440 </requiredArguments/></variableArguments/></keyedArguments/>
ThisConstructorInvocationStatement=\u0442\u043E\u0432\u0430 </requiredArguments/></variableArguments/></keyedArguments/>
AbstractValueLiteral=</value/>
StringLiteral=</value/>
NullLiteral=\u043F\u0440\u0435\u043C\u0430\u0445\u043D\u0438
ThisExpression=\u0442\u043E\u0432\u0430
SuperExpression=\u0441\u0443\u043F\u0435\u0440
MethodInvocation=</expression/> </method/> </requiredArguments/></variableArguments/></keyedArguments/>
FieldAccess=</expression/> </field/>
LocalAccess=</local/>
ParameterAccess=</parameter/>
ArrayAccess=</array/>[ </index/> ]
ArrayLength=</array/>.\u0434\u044A\u043B\u0436\u0438\u043D\u0430
AssignmentExpression=</leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>
InfixExpression=</leftOperand/> </operator/> </rightOperand/>
LogicalComplement=\u041D\u0415 \u0415 </operand/>
InstanceCreation=\u043D\u043E\u0432 </constructor/> </requiredArguments/></variableArguments/></keyedArguments/>
ArrayInstanceCreation=\u043D\u043E\u0432 </arrayType/> { </expressions/> }
StringConcatenation=</leftOperand/> + </rightOperand/>
ResourceExpression=</resource/>
LambdaExpression=</value/>
Argument=</getParameterNameText()/></expression/>
