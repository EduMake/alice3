AbstractDeclaration=</getName()/>
AbstractConstructor=</getDeclaringType()/>
UserLocal=</getValidName()/>
UserLambda=Executa in ordine\n\t</body/>
ExpressionStatement=</expression/>
BlockStatement=</statements/>
ConstructorBlockStatement=</constructorInvocationStatement/>\n</statements/>
WhileLoop=Cat timp </conditional/> este adevarat\n\t</body/>\n\t repeta
ForEachInArrayLoop=Pentru fiecare </__item__/> in </array/>\n\t</body/>\n\t repeta
CountLoop=Numara pana la </count/>\n\t</body/>\n\t repeta
BooleanExpressionBodyPair=Daca </expression/> este adevarat, atunci\n\t</body/>
ConditionalStatement=</booleanExpressionBodyPairs/>\naltfel\n\t</elseBody/>
DoTogether=Executa impreuna\n\t</body/>
DoInOrder=Executa in ordine\n\t</body/>
LocalDeclarationStatement=</__local__/> </_gets_toward_leading_/> </initializer/>
Comment=// </text/>
EachInArrayTogether=fiecare </__item__/> in </array/> impreuna\n\t</body/>
ReturnStatement=returneaza </expression/>
SuperConstructorInvocationStatement=super </requiredArguments/></variableArguments/></keyedArguments/>
ThisConstructorInvocationStatement=acesta </requiredArguments/></variableArguments/></keyedArguments/>
AbstractValueLiteral=</value/>
StringLiteral="</value/>"
NullLiteral=nestabilit
ThisExpression=acesta
SuperExpression=super
TypeExpression=\ 
MethodInvocation=</expression/> </method/> </requiredArguments/></variableArguments/></keyedArguments/>
FieldAccess=</expression/> </field/>
LocalAccess=</local/>
ParameterAccess=</parameter/>
ArrayAccess=</array/>[ </index/> ]
ArrayLength=</array/>.lungime
AssignmentExpression=</leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>
InfixExpression=</leftOperand/> </operator/> </rightOperand/>
LogicalComplement=NU </operand/>
InstanceCreation=nou </constructor/> </requiredArguments/></variableArguments/></keyedArguments/>
ArrayInstanceCreation=nou </arrayType/> { </expressions/> }
StringConcatenation=</leftOperand/> + </rightOperand/>
ResourceExpression=</resource/>
LambdaExpression=</value/>
Argument=</getParameterNameText()/></expression/>
