LogicalComplement = |NOT </operand/>|
InstanceCreation = |new </constructor/> </requiredArguments/></variableArguments/></keyedArguments/>|
DoInOrder = |do in order
	</body/>|
Argument = |</getParameterNameText()/></expression/>|
ParameterAccess = |</parameter/>|
ForEachInArrayLoop = |for each </__item__/> in </array/>
	</body/>
	 loop|
ConditionalStatement = |</booleanExpressionBodyPairs/>
else
	</elseBody/>|
EachInArrayTogether = |each </__item__/> in </array/> together
	</body/>|
MethodInvocation = |</expression/> </method/> </requiredArguments/></variableArguments/></keyedArguments/>|
BlockStatement = |</statements/>|
BooleanExpressionBodyPair = |if </expression/> is true then
	</body/>|
ConstructorBlockStatement = |</constructorInvocationStatement/>
</statements/>|
LocalDeclarationStatement = |</__local__/> </_gets_toward_leading_/> </initializer/>|
ThisExpression = |this|
ArrayAccess = |</array/>[ </index/> ]|
AssignmentExpression = |</leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>|
InfixExpression = |</leftOperand/> </operator/> </rightOperand/>|
ReturnStatement = |return </expression/>|
SuperExpression = |super|
UserLocal = |</getValidName()/>|
Comment = |// </text/>|
ArrayInstanceCreation = |new </arrayType/> { </expressions/> }|
UserLambda = |do in order
	</body/>|
TypeExpression = ||
DoTogether = |do together
	</body/>|
ThisConstructorInvocationStatement = |this </requiredArguments/></variableArguments/></keyedArguments/>|
ArrayLength = |</array/>.length|
AbstractConstructor = |</getDeclaringType()/>|
CountLoop = |count up to </count/>
	</body/>
	 loop|
StringLiteral = |"</value/>"|
AbstractDeclaration = |</getName()/>|
AbstractValueLiteral = |</value/>|
ExpressionStatement = |</expression/>|
StringConcatenation = |</leftOperand/> + </rightOperand/>|
WhileLoop = |while </conditional/> is true
	</body/>
	 loop|
FieldAccess = |</expression/> </field/>|
LocalAccess = |</local/>|
LambdaExpression = |</value/>|
NullLiteral = |unset|
SuperConstructorInvocationStatement = |super </requiredArguments/></variableArguments/></keyedArguments/>|
ResourceExpression = |</resource/>|
