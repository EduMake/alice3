AbstractDeclaration=</getName()/>
AbstractConstructor=</getDeclaringType()/>
UserLocal=</getValidName()/>
UserLambda=\u0432\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C \u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E\n\t</body/>
ExpressionStatement=</expression/>
BlockStatement=</statements/>
ConstructorBlockStatement=</constructorInvocationStatement/>\n</statements/>
WhileLoop=\u043F\u043E\u043A\u0430 </conditional/> \u0438\u0441\u0442\u0438\u043D\u043D\u043E\n\t</body/>\n\t \u0446\u0438\u043A\u043B
ForEachInArrayLoop=\u0434\u043B\u044F \u043A\u0430\u0436\u0434\u043E\u0433\u043E \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430 </__item__/> \u0432 \u043C\u0430\u0441\u0441\u0438\u0432\u0435 </array/>\n\t</body/>\n\t \u0446\u0438\u043A\u043B
CountLoop=\u043F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u044C </count/> \u0440\u0430\u0437(\u0430)\n\t</body/>\n\t \u0446\u0438\u043A\u043B
BooleanExpressionBodyPair=\u0435\u0441\u043B\u0438 </expression/> \u0438\u0441\u0442\u0438\u043D\u043D\u043E, \u0442\u043E\n\t</body/>
ConditionalStatement=</booleanExpressionBodyPairs/>\n\u0438\u043D\u0430\u0447\u0435\n\t</elseBody/>
DoTogether=\u0432\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C \u043E\u0434\u043D\u043E\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E\n\t</body/>
DoInOrder=\u0432\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C \u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E\n\t</body/>
LocalDeclarationStatement=</__local__/> </_gets_toward_leading_/> </initializer/>
Comment=// </text/>
EachInArrayTogether=\u0434\u043B\u044F \u043A\u0430\u0436\u0434\u043E\u0433\u043E \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430 </__item__/> \u0432 \u043C\u0430\u0441\u0441\u0438\u0432\u0435 </array/> \u043E\u0434\u043D\u043E\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E\n\t</body/>
ReturnStatement=\u0432\u0435\u0440\u043D\u0443\u0442\u044C </expression/>
SuperConstructorInvocationStatement=super </requiredArguments/></variableArguments/></keyedArguments/>
ThisConstructorInvocationStatement=this </requiredArguments/></variableArguments/></keyedArguments/>
AbstractValueLiteral=</value/>
StringLiteral="</value/>"
NullLiteral=\u043D\u0435 \u0437\u0430\u0434\u0430\u043D\u043E
ThisExpression=this
SuperExpression=super
MethodInvocation=</expression/> </method/> </requiredArguments/></variableArguments/></keyedArguments/>
FieldAccess=</expression/> </field/>
LocalAccess=</local/>
ParameterAccess=</parameter/>
ArrayAccess=</array/>[ </index/> ]
ArrayLength=</array/>.\u0434\u043B\u0438\u043D\u0430
AssignmentExpression=</leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>
InfixExpression=</leftOperand/> </operator/> </rightOperand/>
LogicalComplement=\u041D\u0415 </operand/>
InstanceCreation=\u043D\u043E\u0432\u044B\u0439\u041E\u0431\u044A\u0435\u043A\u0442 </constructor/> </requiredArguments/></variableArguments/></keyedArguments/>
ArrayInstanceCreation=\u043D\u043E\u0432\u044B\u0439\u041E\u0431\u044A\u0435\u043A\u0442 </arrayType/> { </expressions/> }
StringConcatenation=</leftOperand/> + </rightOperand/>
ResourceExpression=</resource/>
LambdaExpression=</value/>
Argument=</getParameterNameText()/></expression/>
