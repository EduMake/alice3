LogicalComplement = |NOT </operand/>|
InstanceCreation = |new </constructor/> </requiredArguments/></variableArguments/></keyedArguments/>|
DoInOrder = |do in order\n\t</body/>|
Argument = </getParameterNameText()/></expression/>
ParameterAccess = </parameter/>
ForEachInArrayLoop = |for each </__item__/> in </array/>\n\t</body/>\n\t loop|
ConditionalStatement = </booleanExpressionBodyPairs/>\n|else|\n\t</elseBody/>
EachInArrayTogether = |each </__item__/> in </array/> together\n\t</body/>|
MethodInvocation = </expression/> </method/> </requiredArguments/></variableArguments/></keyedArguments/>
BlockStatement = </statements/>
BooleanExpressionBodyPair = |if| </expression/> |is true then|\n\t</body/>
ConstructorBlockStatement = </constructorInvocationStatement/>\n</statements/>
LocalDeclarationStatement = </__local__/> </_gets_toward_leading_/> </initializer/>
ThisExpression = |this|
ArrayAccess = </array/>[ </index/> ]
AssignmentExpression = </leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>
InfixExpression = </leftOperand/> </operator/> </rightOperand/>
ReturnStatement = |return| </expression/>
SuperExpression = |super|
UserLocal = </getValidName()/>
Comment = |//| </text/>
ArrayInstanceCreation = |new| </arrayType/> { </expressions/> }
UserLambda = |do in order|\n\t</body/>
TypeExpression = ||
DoTogether = |do together|\n\t</body/>
ThisConstructorInvocationStatement = |this| </requiredArguments/></variableArguments/></keyedArguments/>
ArrayLength = </array/>.|length|
AbstractConstructor = </getDeclaringType()/>
CountLoop = |count up to </count/>\n\t</body/>\n\t loop|
StringLiteral = "</value/>"
AbstractDeclaration = </getName()/>
AbstractValueLiteral = </value/>
ExpressionStatement = </expression/>
StringConcatenation = </leftOperand/> |+| </rightOperand/>
WhileLoop = |while </conditional/> is true\n\t</body/>\n\t loop|
FieldAccess = </expression/> </field/>
LocalAccess = </local/>
LambdaExpression = </value/>
NullLiteral = |unset|
SuperConstructorInvocationStatement = |super| </requiredArguments/></variableArguments/></keyedArguments/>
ResourceExpression = </resource/>
