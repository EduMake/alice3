AbstractConstructor = </getDeclaringType()/>
AbstractDeclaration = </getName()/>
AbstractValueLiteral = </value/>
Argument = </getParameterNameText()/></expression/>
ArrayAccess = </array/>[ </index/> ]
ArrayInstanceCreation = yeni </arrayType/> { </expressions/> }
ArrayLength = </array/>.uzunluk
AssignmentExpression = </leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>
BlockStatement = </statements/>
BooleanExpressionBodyPair = e\u011fer </expression/> do\u011fru ise \n\t</body/>
Comment = // </text/>
ConditionalStatement = </booleanExpressionBodyPairs/>\nde\u011filse\n\t</elseBody/>
ConstructorBlockStatement = </constructorInvocationStatement/>\n</statements/>
CountLoop = \ </count/> kadar say\n\t</body/>\n\t d\u00f6ng\u00fc
DoInOrder = s\u0131ral\u0131 yap\n\t</body/>
DoTogether = birlikte yap\n\t</body/>
EachInArrayTogether = her bir </__item__/> birlikte </array/> i\u00e7indeki\n\t</body/>
ExpressionStatement = </expression/>
FieldAccess = </expression/> </field/>
ForEachInArrayLoop = her bir </__item__/> i\u00e7in </array/> i\u00e7indeki\n\t</body/>\n\t d\u00f6ng\u00fc
InfixExpression = </leftOperand/> </operator/> </rightOperand/>
InstanceCreation = yeni </constructor/> </requiredArguments/></variableArguments/></keyedArguments/>
LambdaExpression = </value/>
LocalAccess = </local/>
LocalDeclarationStatement = </__local__/> </_gets_toward_leading_/> </initializer/>
LogicalComplement = DE\u011e\u0130L </operand/>
MethodInvocation = </expression/> </method/> </requiredArguments/></variableArguments/></keyedArguments/>
NullLiteral = tan\u0131mlanmam\u0131\u015f
ParameterAccess = </parameter/>
ResourceExpression = </resource/>
ReturnStatement = geriD\u00f6n </expression/>
StringConcatenation = </leftOperand/> + </rightOperand/>
StringLiteral = "</value/>"
SuperConstructorInvocationStatement = s\u00fcper </requiredArguments/></variableArguments/></keyedArguments/>
SuperExpression = s\u00fcper
ThisConstructorInvocationStatement = bu </requiredArguments/></variableArguments/></keyedArguments/>
ThisExpression = bu
UserLambda = s\u0131ral\u0131 yap\n\t</body/>
UserLocal = </getValidName()/>
WhileLoop = </conditional/> do\u011fru iken\n\t</body/>\n\t d\u00f6ng\u00fc
