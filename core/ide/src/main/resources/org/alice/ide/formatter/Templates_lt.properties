AbstractConstructor = </getDeclaringType()/>
AbstractDeclaration = </getName()/>
AbstractValueLiteral = </value/>
Argument = </getParameterNameText()/></expression/>
ArrayAccess = </array/>[ </index/> ]
ArrayInstanceCreation = naujas </arrayType/> { </expressions/> }
ArrayLength = </array/>.ilgis
AssignmentExpression = </leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>
BlockStatement = </statements/>
Comment = // </text/>
ConditionalStatement = </booleanExpressionBodyPairs/>\nkitu atveju\n\t</elseBody/>
ConstructorBlockStatement = </constructorInvocationStatement/>\n</statements/>
ExpressionStatement = </expression/>
FieldAccess = </expression/> </field/>
InfixExpression = </leftOperand/> </operator/> </rightOperand/>
InstanceCreation = naujas </constructor/> </requiredArguments/> </variableArguments/> </keyedArguments/>
LambdaExpression = </value/>
LocalAccess = </local/>
LocalDeclarationStatement = </__local__/> </_gets_toward_leading_/> </initializer/>
LogicalComplement = NE </operand/>
MethodInvocation = </expression/> </method/> </requiredArguments/></variableArguments/></keyedArguments/>
ParameterAccess = </parameter/>
ResourceExpression = </resource/>
ReturnStatement = gr\u0105\u017einti </expression/>
StringConcatenation = </leftOperand/> + </rightOperand/>
StringLiteral = "</value/>"
SuperConstructorInvocationStatement =  </requiredArguments/></variableArguments/></keyedArguments/>
ThisConstructorInvocationStatement = \u0161is </requiredArguments/></variableArguments/></keyedArguments/>
UserLocal = </getValidName()/>
