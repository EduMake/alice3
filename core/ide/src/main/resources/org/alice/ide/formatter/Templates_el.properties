AbstractDeclaration = </getName()/>
AbstractConstructor = </getDeclaringType()/>
UserLocal = </getValidName()/>
UserLambda = \u03B5\u03BA\u03C4\u03AD\u03BB\u03B5\u03C3\u03B5 \u03C0\u03C1\u03BF\u03BA\u03B5\u03B9\u03BC\u03AD\u03BD\u03BF\u03C5\n\t</body/>
ExpressionStatement = </expression/>
BlockStatement = </statements/>
ConstructorBlockStatement = </constructorInvocationStatement/>\n</statements/>
WhileLoop = \u03B5\u03BD\u03CE </conditional/> \u03B5\u03AF\u03BD\u03B1\u03B9 \u03B1\u03BB\u03B7\u03B8\u03AE\u03C2\n\t</body/>\n\t \u03B5\u03C0\u03B1\u03BD\u03AC\u03BB\u03B1\u03B2\u03B5
ForEachInArrayLoop = \u03B3\u03B9\u03B1 \u03BA\u03AC\u03B8\u03B5 </__item__/> \u03C3\u03C4\u03BF </array/>\n\t</body/>\n\t\u03B5\u03C0\u03B1\u03BD\u03AC\u03BB\u03B1\u03B2\u03B5
CountLoop = \u03BC\u03AD\u03C4\u03C1\u03B7\u03C3\u03B5 \u03BC\u03AD\u03C7\u03C1\u03B9 </count/>\n\t</body/>\n\t \u03B5\u03C0\u03B1\u03BD\u03AD\u03BB\u03B1\u03B2\u03B5
BooleanExpressionBodyPair = \u03B1\u03BD</expression/> \u03B5\u03AF\u03BD\u03B1\u03B9 \u03B1\u03BB\u03B7\u03B8\u03AE\u03C2 \u03C4\u03CC\u03C4\u03B5\n\t</body/>
ConditionalStatement = </booleanExpressionBodyPairs/>\n\u03B1\u03BB\u03BB\u03B9\u03CE\u03C2\n\t</elseBody/>
DoTogether = \u03B5\u03BA\u03C4\u03AD\u03BB\u03B5\u03C3\u03B5 \u03BC\u03B1\u03B6\u03AF\n\t</body/>
DoInOrder = \u03B5\u03BA\u03C4\u03AD\u03BB\u03B5\u03C3\u03B5 \u03C0\u03C1\u03BF\u03BA\u03B5\u03B9\u03BC\u03AD\u03BD\u03BF\u03C5\n\t</body/>
LocalDeclarationStatement = </__local__/> </_gets_toward_leading_/> </initializer/>
Comment = // </text/>
EachInArrayTogether = \u03BA\u03AC\u03B8\u03B5</__item__/> \u03C3\u03C4\u03BF\u03BD</array/> \u03BC\u03B1\u03B6\u03AF\n\t</body/>
ReturnStatement = \u03B5\u03C0\u03B9\u03C3\u03C4\u03C1\u03BF\u03C6\u03AE</expression/>
SuperConstructorInvocationStatement = \u03C5\u03C0\u03B5\u03C1</requiredArguments/></variableArguments/></keyedArguments/>
ThisConstructorInvocationStatement = \u03B1\u03C5\u03C4\u03CC</requiredArguments/></variableArguments/></keyedArguments/>
AbstractValueLiteral = </value/>
StringLiteral = "</value/>"
NullLiteral = \u03B1\u03BD\u03B1\u03AF\u03C1\u03B5\u03C3\u03B7
ThisExpression = \u03B1\u03C5\u03C4\u03CC
SuperExpression = \u03C5\u03C0\u03B5\u03C1
MethodInvocation = </expression/> </method/> </requiredArguments/></variableArguments/></keyedArguments/>
FieldAccess = </expression/> </field/>
LocalAccess = </local/>
ParameterAccess = </parameter/>
ArrayAccess = </array/>[ </index/> ]
ArrayLength = </array/>.\u03BC\u03AE\u03BA\u03BF\u03C2
AssignmentExpression = </leftHandSide/> </_gets_toward_leading_/> </rightHandSide/>
InfixExpression = </leftOperand/> </operator/> </rightOperand/>
LogicalComplement = OXI</operand/>
InstanceCreation = \u03BD\u03AD\u03BF</constructor/> </requiredArguments/></variableArguments/></keyedArguments/>
ArrayInstanceCreation = \u03BD\u03AD\u03BF</arrayType/> { </expressions/> }
StringConcatenation = </leftOperand/> + </rightOperand/>
ResourceExpression = </resource/>
LambdaExpression = </value/>
Argument = </getParameterNameText()/></expression/>
